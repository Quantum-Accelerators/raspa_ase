var __index = {"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"raspa_ase","text":"<p>Welcome to the documentation for the <code>raspa_ase</code> code, an ASE calculator for the RASPA molecular simulation code.</p>"},{"location":"examples.html","title":"Examples","text":"<p>In this section, we provide the necessary inputs to run several of the examples in section 4.2 of the RASPA manual.</p> <p>Tip</p> <p>Pre-tabulated force fields and molecule definition files can be found in the <code>share</code> directory.</p>"},{"location":"examples.html#example-1-monte-carlo-of-methane-in-a-box","title":"Example 1: Monte Carlo of Methane in a Box","text":"<pre><code>from ase import Atoms\nfrom raspa_ase import Raspa\n\natoms = Atoms()  #  (1)!\nboxes = [  #  (2)!\n    {\n        \"BoxLengths\": [30, 30, 30],\n        \"ExternalTemperature\": 300,\n        \"Movies\": True,  # (3)!\n        \"WriteMoviesEvery\": 100,\n    }\n]\ncomponents = [  # (4)!\n    {\n        \"MoleculeName\": \"methane\",\n        \"MoleculeDefinition\": \"ExampleDefinitions\",\n        \"TranslationProbability\": 1.0,\n        \"CreateNumberOfMolecules\": 100,\n    }\n]\nparameters = {  # (5)!\n    \"SimulationType\": \"MonteCarlo\",\n    \"NumberOfCycles\": 10000,\n    \"NumberOfInitializationCycles\": 1000,\n    \"PrintEvery\": 1000,\n    \"Forcefield\": \"ExampleMoleculeForceField\",\n}\ncalc = Raspa(boxes=boxes, components=components, parameters=parameters)\n\natoms.calc = calc\natoms.get_potential_energy()\nprint(calc.results)\n</code></pre> <ol> <li> <p>Use an empty <code>Atoms</code> object to create a system without a framework.</p> </li> <li> <p>You do not need to specify the box number. It will be determined automatically based on the order in which the components are listed. We define the box parameters as a dictionary to be provided to the <code>boxes</code> keyword argument.</p> </li> <li> <p><code>True</code> and <code>False</code> will be automatically translated to \"Yes\" and \"No\", respectively.</p> </li> <li> <p>You do not need to specify the component number. It will be determined automatically based on the order in which the components are listed. We define the component parameters as a dictionary to be provided to the <code>components</code> keyword argument.</p> </li> <li> <p>The remaining force field parameters (i.e. all those beyond the box, component, and framework parameters) are to be specified as a dictionary to be provided to the <code>parameters</code> keyword argument.</p> </li> </ol>"},{"location":"examples.html#example-2-monte-carlo-of-co2-in-a-box-and-n2-in-another-box","title":"Example 2: Monte Carlo of CO2 in a Box and N2 in Another Box","text":"<pre><code>from ase import Atoms\nfrom raspa_ase import Raspa\n\natoms = Atoms()\nboxes = [\n    {\n        \"BoxLengths\": [25, 25, 25],\n        \"ExternalTemperature\": 300.0,\n        \"Movies\": True,\n        \"WriteMoviesEvery\": 10,\n    },\n    {\n        \"BoxLengths\": [30, 30, 30],\n        \"BoxAngles\": [90, 120, 120],\n        \"ExternalTemperature\": 500,\n        \"Movies\": True,\n        \"WriteMoviesEvery\": 10,\n    },\n]\ncomponents = [\n    {\n        \"MoleculeName\": \"N2\",\n        \"MoleculeDefinition\": \"ExampleDefinitions\",\n        \"TranslationProbability\": 1.0,\n        \"RotationProbability\": 1.0,\n        \"ReinsertionProbability\": 1.0,\n        \"CreateNumberOfMolecules\": [50, 25],\n    },\n    {\n        \"MoleculeName\": \"CO2\",\n        \"MoleculeDefinition\": \"ExampleDefinitions\",\n        \"TranslationProbability\": 1.0,\n        \"RotationProbability\": 1.0,\n        \"ReinsertionProbability\": 1.0,\n        \"CreateNumberOfMolecules\": [25, 50],\n    },\n]\nparameters = {\n    \"SimulationType\": \"MonteCarlo\",\n    \"NumberOfCycles\": 10000,\n    \"NumberOfInitializationCycles\": 1000,\n    \"PrintEvery\": 100,\n    \"Forcefield\": \"ExampleMoleculeForceField\",\n}\ncalc = Raspa(boxes=boxes, components=components, parameters=parameters)\n\natoms.calc = calc\natoms.get_potential_energy()\nprint(calc.results)\n</code></pre>"},{"location":"examples.html#example-7-adsorption-isotherm-of-methane-in-mfi","title":"Example 7: Adsorption isotherm of methane in MFI","text":"<pre><code>from ase.io import read\nfrom raspa_ase import Raspa\n\natoms = read(\"MFI_SI.cif\")  # (1)!\natoms.info = {  # (2)!\n    \"UnitCells\": [2, 2, 2],\n    \"HeliumVoidFraction\": 0.29,\n    \"ExternalTemperature\": 300.0,\n    \"ExternalPressure\": [1e4, 1e5],\n}\ncomponents = [\n    {\n        \"MoleculeName\": \"methane\",\n        \"MoleculeDefinition\": \"ExampleDefinitions\",\n        \"TranslationProbability\": 0.5,\n        \"ReinsertionProbability\": 0.5,\n        \"SwapProbability\": 1.0,\n        \"CreateNumberOfMolecules\": 0,\n    }\n]\nparameters = {\n    \"SimulationType\": \"MonteCarlo\",\n    \"NumberOfCycles\": 25000,\n    \"NumberOfInitializationCycles\": 2000,\n    \"PrintEvery\": 1000,\n    \"Forcefield\": \"ExampleZeolitesForceField\",\n    \"RemoveAtomNumberCodeFromLabel\": True,\n    \"ComputeNumberOfMoleculesHistogram\": True,\n    \"WriteNumberOfMoleculesHistogramEvery\": 5000,\n    \"NumberOfMoleculesHistogramSize\": 1100,\n    \"NumberOfMoleculesRange\": 80,\n    \"ComputeEnergyHistogram\": True,\n    \"WriteEnergyHistogramEvery\": 5000,\n    \"EnergyHistogramSize\": 400,\n    \"EnergyHistogramLowerLimit\": -110000,\n    \"EnergyHistogramUpperLimit\": -20000,\n}\ncalc = Raspa(components=components, parameters=parameters)\n\natoms.calc = calc\natoms.get_potential_energy()\nprint(calc.results)\n</code></pre> <ol> <li> <p>This file is provided in <code>raspa_ase/docs/files/MFI_SI.cif</code> for the sake of this tutorial. The <code>Atoms</code> object represents the framework to be studied and will be written out to the current working directory to be used by RASPA.</p> </li> <li> <p>The framework parameters are to be specified as <code>info</code> attributes of the <code>Atoms</code> object. You do not need to include the framework number or framework name. These will be included automatically.</p> </li> </ol>"},{"location":"install.html","title":"Installation","text":""},{"location":"install.html#raspa","title":"RASPA","text":"<p>First, install RASPA based on the official instructions and set the <code>$RASPA_DIR</code> environment variable as instructed.</p> Can't find the <code>bin</code> folder? <p>Don't forget the <code>make install</code> step at the end!</p>"},{"location":"install.html#ase-calculator","title":"ASE Calculator","text":"<p>To use <code>raspa_ase</code>:</p> <pre><code>pip install raspa-ase\n</code></pre>"},{"location":"intro.html","title":"Overview","text":"<p>The calculator is quite straightforward to use. For details on each parameter, refer to the RASPA manual.</p>"},{"location":"intro.html#instantiating-and-running-the-calculator","title":"Instantiating and Running the Calculator","text":"<p>The calculator is applied to an <code>Atoms</code> object, representing the framework under investigation. To run a RASPA calculator, call the <code>.get_potential_energy()</code> method like so:</p> <pre><code>from ase.io import read\nfrom raspa_ase import Raspa\n\natoms = read(\"my_framework.cif\")\natoms.calc = Raspa(boxes=..., components=..., parameters=...)\natoms.get_potential_energy()\nprint(calc.results)\n</code></pre> <p>Tabulated results can be found in the <code>calc.results</code> dictionary.</p>"},{"location":"intro.html#framework-properties","title":"Framework Properties","text":""},{"location":"intro.html#defining-the-structure","title":"Defining the Structure","text":"<p>The calculator is applied to an <code>Atoms</code> object, which is the framework to be included in your system. If you want to run a calculation without a framework (i.e. with just a box of molecules), you can use an empty <code>Atoms</code> object, defined as <code>Atoms()</code>.</p>"},{"location":"intro.html#defining-the-framework-properties","title":"Defining the Framework Properties","text":"<p>For framework-specific properties, they should be attached to the <code>Atoms</code> object's <code>.info</code> attribute.</p> <p>For instance:</p> <pre><code>atoms.info[\"HeliumVoidFraction\"] = 0.149\n</code></pre> <p>would be equivalent to</p> <pre><code>Framework 0\n    FrameworkName framework0\n    HeliumVoidFraction 0.149\n</code></pre> <p>Note</p> <p>You never need to specify the framework number or the framework name, and the the CIF will be automatically written out for you based on the <code>Atoms</code> object.</p>"},{"location":"intro.html#framework-charges","title":"Framework Charges","text":"<p>If you want to run a calculation with partial atomic charges on the framework, you can set the initial charges:</p> <p>For instance:</p> <pre><code>atoms.set_initial_charges([1.0, 2.0])\n</code></pre> <p>would write out the <code>_atom_site_charge</code> column in the CIF as 1.0 and 2.0 for atom indices 0 and 1, respectively. It will also automatically set \"UseChargesFromCIFFile\" to \"Yes\" in the <code>simulation.input</code> file.</p>"},{"location":"intro.html#framework-unit-cells","title":"Framework Unit Cells","text":"<p>If you don't specify a \"UnitCells\" entry in <code>atoms.info</code>, the RASPA calculator will ensure that the minimum image convention is satisfied based on your \"CutOff\" value. If a \"CutOff\" is not specified, the number of unit cells will be set based on a value of 12.0 \u00c5 for the cutoff.</p>"},{"location":"intro.html#multiple-frameworks","title":"Multiple Frameworks","text":"<p>If you need to use multiple frameworks in your simulation, you should apply the calculator to a blank <code>Atoms</code> object (i.e. <code>Atoms()</code>) and pass a <code>list[Atoms]</code> to the <code>multiple_frameworks</code> keyword argument.</p>"},{"location":"intro.html#boxes","title":"Boxes","text":"<p>The optional <code>boxes</code> keyword argument, of type <code>list[dict]</code>, is a list where each entry is a given set of box parameters formatted as a dictionary.</p> <p>For instance:</p> <pre><code>boxes = [\n    {\"BoxLengths\": [30, 30, 30]},\n    {\"BoxLengths\": [40, 40, 40], \"BoxAngles\": [90, 120, 120]},\n]\ncalc = Raspa(boxes=boxes)\n</code></pre> <p>is equivalent to</p> <pre><code>Box 0\n    BoxLengths 30 30 30\nBox 1\n    BoxLengths 40 40 40\n    BoxAngles 90 120 120\n</code></pre> <p>Note</p> <p>You never need to specify the box number. This is determined based on the index of the box in the list.</p>"},{"location":"intro.html#components","title":"Components","text":"<p>The optional <code>components</code> keyword argument, of type <code>list[dict]</code>, is a list where each entry is a given set of component parameters formatted as a dictionary.</p> <p>For instance:</p> <pre><code>components = [\n    {\"MoleculeName\": \"CO2\", \"MoleculeDefinition\": \"ExampleDefinitions\"},\n    {\"MoleculeName\": \"N2\", \"MoleculeDefinition\": \"ExampleDefinitions\"},\n]\ncalc = Raspa(components=components)\n</code></pre> <p>is equivalent to</p> <pre><code>Component 0 MoleculeName CO2\n    MoleculeDefinition ExampleDefinitions\nComponent 1 MoleculeName N2\n    MoleculeDefinition ExampleDefinitions\n</code></pre> <p>Note</p> <p>You never need to specify the component number. This is determined based on the index of the component in the list. The \"MoleculeName\" will also be formatted automatically for you.</p>"},{"location":"intro.html#remaining-parameters","title":"Remaining Parameters","text":"<p>The optional <code>parameters</code> keyword argument, of type <code>dict</code>, is a dictionary of all other parameters to be passed to RASPA.</p> <p>For instance:</p> <pre><code>parameters = {\n    \"SimulationType\": \"MonteCarlo\",\n    \"NumberOfCycles\": 10000,\n    \"NumberOfInitializationCycles\": 1000,\n    \"Movies\": True,\n}\ncalc = Raspa(parameters=parameters)\n</code></pre> <p>is equivalent to</p> <pre><code>SimulationType MonteCarlo\nNumberOfCycles 10000\nNumberOfInitializationCycles 1000\nMovies Yes\n</code></pre> <p>Note</p> <p>The parameters are case-insensitive, booleans will be converted to \"Yes\" or \"No\" as appropriate, lists will be converted to space-separated strings, and dictionaries will be converted to properly formatted key-value pairs.</p>"},{"location":"about/changelog.html","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog.html#002","title":"[0.0.2]","text":""},{"location":"about/changelog.html#fixed","title":"Fixed","text":"<ul> <li>Fixed <code>directory</code> kwarg</li> </ul>"},{"location":"about/changelog.html#001","title":"[0.0.1]","text":""},{"location":"about/changelog.html#added","title":"Added","text":"<ul> <li>The initial release!</li> </ul>"},{"location":"about/conduct.html","title":"Code of Conduct","text":""},{"location":"about/conduct.html#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"about/conduct.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"about/conduct.html#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"about/conduct.html#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"about/conduct.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"about/conduct.html#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"about/conduct.html#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"about/conduct.html#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"about/conduct.html#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"about/conduct.html#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"about/conduct.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"about/license.html","title":"License","text":"LICENSE.md<pre><code>BSD 3-Clause License\n\nCopyright (c) 2023\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"reference/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>raspa_ase<ul> <li>calculator</li> <li>utils<ul> <li>dicts</li> <li>io</li> <li>params</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/raspa_ase/calculator.html","title":"calculator","text":"<p>ASE calculator for RASPA</p>"},{"location":"reference/raspa_ase/calculator.html#raspa_ase.calculator.Raspa","title":"Raspa","text":"<pre><code>Raspa(profile=None, directory='.', boxes=None, components=None, parameters=None, multiple_frameworks=None, **kwargs)\n</code></pre> <p>               Bases: <code>GenericFileIOCalculator</code></p> <p>The RASPA calculator.</p> <p>This calculator is to be set on an <code>Atoms</code> object, which will be the framework. All framework-related parameters should be set in the <code>Atoms.info</code> dictionary.</p> <p>If you have an ASE <code>Atoms</code> object of the MFI zeolite (\"atoms\"), then:</p> <pre><code>atoms.info = {\"HeliumVoidFraction\": 0.29}\n</code></pre> <p>would be written out as the following:</p> <pre><code>Framework 0\n    FrameworkName framework0\n    UnitCells 12 12 12\n    HeliumVoidFraction 0.29\n</code></pre> <p>The <code>FrameworkName</code> is automaticallly set by the calculator. The UnitCells parameter will be automatically set to prevent spurious interactions between periodic images based on the cutoff, if the parameter is not already supplied by the user.</p> <p>To use partial atomic charges on the framework, set the <code>Atoms.set_initial_charges</code> method on the <code>Atoms</code> object. The charges will be written out to the CIF file and <code>UseChargesFromCIFFile</code> will be set to <code>yes</code> in the <code>simulation.input</code> file.</p> <p>To use no framework, have the <code>Atoms</code> object be empty, i.e. <code>Atoms()</code>.</p> <p>Parameters:</p> <ul> <li> <code>profile</code>               (<code>RaspaProfile | None</code>, default:                   <code>None</code> )           \u2013            <p>An instantiated raspa_ase.calculator.RaspaProfile object to use. The default is typically fine, which runs the following: <code>$RASPA_DIR/bin/simulate simulation.input</code>.</p> </li> <li> <code>directory</code>               (<code>Path | str</code>, default:                   <code>'.'</code> )           \u2013            <p>The path to the directory to run the RASPA calculation in, which defaults to the current working directory.</p> </li> <li> <code>boxes</code>               (<code>list[dict[str, Any]] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of dictionaries, where each dictionary is a RASPA box. The default is an empty list.</p> <p>Example:</p> <pre><code>boxes = [{\"BoxLengths\": [25, 25, 25], \"ExternalTemperature\": 300.0, \"Movies\": True, \"WriteMoviesEvery\": 10}, {\"BoxLengths\": [30, 30, 30], \"BoxAngles\": [90, 120, 90], \"ExternalTemperature\": 500.0, \"Movies\": True, \"WriteMoviesEvery\": 10}]\nRaspa(boxes=boxes)\n</code></pre> <p>would be written out as the following from 4.2 Example 2 of the RASPA manual:</p> <pre><code>Box 0\n    BoxLengths 25 25 25\n    ExternalTemperature 300.0\n    Movies yes\n    WriteMoviesEvery 10\nBox 1\n    BoxLengths 30 30 30\n    BoxAngles 90 120 90\n    ExternalTemperature 500.0\n    Movies yes\n    WriteMoviesEvery 10\n</code></pre> </li> <li> <code>components</code>               (<code>list[dict[str, Any]] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of dictionaries, where each dictionary is a RASPA component. The default is an empty list.</p> <p>Example:</p> <pre><code>components = [{\"MolelculeName\": \"N2\", \"MoleculeDefinition\": \"ExampleDefinition\", \"TranslationProbability\": 1.0, \"RotationProbability\": 1.0, \"ReinsertionProbability\": 1.0, \"CreateNumberOfMolecules\": [50, 25]}, {\"MoleculeName\": \"CO2\", \"MoleculeDefinition\": \"ExampleDefinitions\", \"TranslationProbability\": 1.0, \"RotationProbability\": 1.0, \"ReinsertionProbability\": 1.0, \"CreateNumberOfMolecules\": [25, 50]}]\nRaspa(components=components)\n</code></pre> <p>would be written out as the following from 4.2 Example 2 of the RASPA manual:</p> <pre><code>Component 0 MoleculeName N2\n    MoleculeDefinition ExampleDefinitions\n    TranslationProbability 1.0\n    RotationProbability 1.0\n    ReinsertionProbability 1.0\n    CreateNumberOfMolecules 50 25\nComponent 1 MoleculeName CO2\n    MoleculeDefinition ExampleDefinitions\n    TranslationProbability 1.0\n    RotationProbability 1.0\n    ReinsertionProbability 1.0\n    CreateNumberOfMolecules 25 50\n</code></pre> </li> <li> <code>parameters</code>               (<code>dict[str, Any] | None</code>, default:                   <code>None</code> )           \u2013            <p>Any RASPA parameters beyond the Box and Component parameters, formatted as a dictionary. Booleans will be converted to \"Yes\" or \"No\" automatically, and lists will be converted to space-separated strings. The RASPA parameters are case-insensitive.</p> <p>Example:</p> <pre><code>parameters = {\"SimulationType\": \"MonteCarlo\", \"NumberOfCycles\": 10000, \"NumberOfInitializationCycles\": 1000, \"PrintEvery\": 100, \"ForceField\": \"ExampleMoleculeForceField\"}\nRaspa(parameters=parameters)\n</code></pre> <p>would be written out as the following from 4.2 Example 2 of the RASPA manual:</p> <pre><code>SimulationType MonteCarlo\nNumberOfCycles 10000\nNumberOfInitializationCycles 1000\nPrintEvery 100\nForcefield ExampleMoleculeForceField\n</code></pre> </li> <li> <code>multiple_frameworks</code>               (<code>list[Atoms] | None</code>, default:                   <code>None</code> )           \u2013            <p>If you need to use multiple frameworks, then special treatment is required. Instead of having the framework as the <code>Atoms</code> object, you need to supply a list of <code>Atoms</code> objects to the <code>multiple_frameworks</code> keyword argument. In this case, the <code>Atoms</code> object the calculator is applied to should be empty, i.e. <code>Atoms()</code>.</p> <p>Example:</p> <pre><code>atoms1 = read(\"my_framework1.cif\")\natoms2 = read(\"my_framework2.cif\")\natoms1.info = {\"UnitCells\": [1, 1, 1]}\natoms2.info = {\"HeliumVoidFraction\": 0.25, \"UnitCells\": [4, 4, 4]}\nRaspa(multiple_frameworks=[atoms1, atoms2])\n</code></pre> <p>would be written out as the following:</p> <pre><code>Framework 0\n    FrameworkName framework0\n    UnitCells 1 1 1\nFramework 1\n    FrameworkName framework1\n    HeliumVoidFraction 0.25\n    UnitCells 4 4 4\n</code></pre> </li> <li> <code>**kwargs</code>           \u2013            <p>Any additional arguments to pass to the <code>GenericFileIO</code> calculator.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>raspa_ase/calculator.py</code> <pre><code>def __init__(\n    self,\n    profile: RaspaProfile | None = None,\n    directory: Path | str = \".\",\n    boxes: list[dict[str, Any]] | None = None,\n    components: list[dict[str, Any]] | None = None,\n    parameters: dict[str, Any] | None = None,\n    multiple_frameworks: list[Atoms] | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Initialize the RASPA calculator. The $RASPA_DIR environment variable must\n    be set.\n\n    This calculator is to be set on an `Atoms` object, which will be the\n    framework. All framework-related parameters should be set in the `Atoms.info`\n    dictionary.\n\n    If you have an ASE `Atoms` object of the MFI zeolite (\"atoms\"), then:\n\n    ```python\n    atoms.info = {\"HeliumVoidFraction\": 0.29}\n    ```\n\n    would be written out as the following:\n\n    ```\n    Framework 0\n        FrameworkName framework0\n        UnitCells 12 12 12\n        HeliumVoidFraction 0.29\n    ```\n\n    The `FrameworkName` is automaticallly set by the calculator.\n    The UnitCells parameter will be automatically set to prevent spurious\n    interactions between periodic images based on the cutoff,\n    if the parameter is not already supplied by the user.\n\n    To use partial atomic charges on the framework, set the `Atoms.set_initial_charges`\n    method on the `Atoms` object. The charges will be written out to the CIF file\n    and `UseChargesFromCIFFile` will be set to `yes` in the `simulation.input` file.\n\n    To use no framework, have the `Atoms` object be empty, i.e. `Atoms()`.\n\n    Parameters\n    ----------\n    profile\n        An instantiated [raspa_ase.calculator.RaspaProfile][] object to use.\n        The default is typically fine, which runs the following:\n        `$RASPA_DIR/bin/simulate simulation.input`.\n    directory\n        The path to the directory to run the RASPA calculation in, which\n        defaults to the current working directory.\n    boxes\n        A list of dictionaries, where each dictionary is a RASPA box.\n        The default is an empty list.\n\n        Example:\n\n        ```python\n        boxes = [{\"BoxLengths\": [25, 25, 25], \"ExternalTemperature\": 300.0, \"Movies\": True, \"WriteMoviesEvery\": 10}, {\"BoxLengths\": [30, 30, 30], \"BoxAngles\": [90, 120, 90], \"ExternalTemperature\": 500.0, \"Movies\": True, \"WriteMoviesEvery\": 10}]\n        Raspa(boxes=boxes)\n        ```\n\n        would be written out as the following from 4.2 Example 2 of the RASPA manual:\n\n        ```\n        Box 0\n            BoxLengths 25 25 25\n            ExternalTemperature 300.0\n            Movies yes\n            WriteMoviesEvery 10\n        Box 1\n            BoxLengths 30 30 30\n            BoxAngles 90 120 90\n            ExternalTemperature 500.0\n            Movies yes\n            WriteMoviesEvery 10\n        ```\n    components\n        A list of dictionaries, where each dictionary is a RASPA component.\n        The default is an empty list.\n\n        Example:\n\n        ```python\n        components = [{\"MolelculeName\": \"N2\", \"MoleculeDefinition\": \"ExampleDefinition\", \"TranslationProbability\": 1.0, \"RotationProbability\": 1.0, \"ReinsertionProbability\": 1.0, \"CreateNumberOfMolecules\": [50, 25]}, {\"MoleculeName\": \"CO2\", \"MoleculeDefinition\": \"ExampleDefinitions\", \"TranslationProbability\": 1.0, \"RotationProbability\": 1.0, \"ReinsertionProbability\": 1.0, \"CreateNumberOfMolecules\": [25, 50]}]\n        Raspa(components=components)\n        ```\n\n        would be written out as the following from 4.2 Example 2 of the RASPA manual:\n\n        ```\n        Component 0 MoleculeName N2\n            MoleculeDefinition ExampleDefinitions\n            TranslationProbability 1.0\n            RotationProbability 1.0\n            ReinsertionProbability 1.0\n            CreateNumberOfMolecules 50 25\n        Component 1 MoleculeName CO2\n            MoleculeDefinition ExampleDefinitions\n            TranslationProbability 1.0\n            RotationProbability 1.0\n            ReinsertionProbability 1.0\n            CreateNumberOfMolecules 25 50\n        ```\n    parameters\n        Any RASPA parameters beyond the Box and Component parameters, formatted as a dictionary.\n        Booleans will be converted to \"Yes\" or \"No\" automatically, and lists will be converted to\n        space-separated strings. The RASPA parameters are case-insensitive.\n\n        Example:\n\n        ```python\n        parameters = {\"SimulationType\": \"MonteCarlo\", \"NumberOfCycles\": 10000, \"NumberOfInitializationCycles\": 1000, \"PrintEvery\": 100, \"ForceField\": \"ExampleMoleculeForceField\"}\n        Raspa(parameters=parameters)\n        ```\n\n        would be written out as the following from 4.2 Example 2 of the RASPA manual:\n\n        ```\n        SimulationType MonteCarlo\n        NumberOfCycles 10000\n        NumberOfInitializationCycles 1000\n        PrintEvery 100\n        Forcefield ExampleMoleculeForceField\n        ```\n    multiple_frameworks\n        If you need to use multiple frameworks, then special treatment is required. Instead of\n        having the framework as the `Atoms` object, you need to supply a list of `Atoms` objects\n        to the `multiple_frameworks` keyword argument. In this case, the `Atoms` object\n        the calculator is applied to should be empty, i.e. `Atoms()`.\n\n        Example:\n\n        ```python\n        atoms1 = read(\"my_framework1.cif\")\n        atoms2 = read(\"my_framework2.cif\")\n        atoms1.info = {\"UnitCells\": [1, 1, 1]}\n        atoms2.info = {\"HeliumVoidFraction\": 0.25, \"UnitCells\": [4, 4, 4]}\n        Raspa(multiple_frameworks=[atoms1, atoms2])\n        ```\n\n        would be written out as the following:\n\n        ```\n        Framework 0\n            FrameworkName framework0\n            UnitCells 1 1 1\n        Framework 1\n            FrameworkName framework1\n            HeliumVoidFraction 0.25\n            UnitCells 4 4 4\n        ```\n    **kwargs\n        Any additional arguments to pass to the `GenericFileIO` calculator.\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    profile = profile or RaspaProfile()\n    multiple_frameworks = multiple_frameworks or []\n    boxes = boxes or []\n    components = components or []\n    parameters = parameters or {}\n\n    parameters = merge_parameters(\n        parameters, get_framework_params(multiple_frameworks)\n    )\n    for i, component in enumerate(components):\n        molecule_name = pop_parameter(component, \"MoleculeName\")\n        parameters = merge_parameters(\n            parameters, {f\"Component {i} MoleculeName {molecule_name}\": component}\n        )\n    for i, box in enumerate(boxes):\n        parameters = merge_parameters(parameters, {f\"Box {i}\": box})\n\n    super().__init__(\n        template=RaspaTemplate(frameworks=multiple_frameworks),\n        profile=profile,\n        directory=directory,\n        parameters=parameters,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/raspa_ase/calculator.html#raspa_ase.calculator.RaspaProfile","title":"RaspaProfile","text":"<pre><code>RaspaProfile(command=None, **kwargs)\n</code></pre> <p>               Bases: <code>BaseProfile</code></p> <p>RASPA profile, which defines the command that will be executed and where.</p> <p>Parameters:</p> <ul> <li> <code>command</code>               (<code>Path | str | None</code>, default:                   <code>None</code> )           \u2013            <p>The command to run RASPA. This defaults to doing <code>${RASPA_DIR}/bin/simulate</code> and typically does not need to be changed.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>raspa_ase/calculator.py</code> <pre><code>def __init__(self, command: Path | str | None = None, **kwargs) -&gt; None:\n    \"\"\"\n    Initialize the RASPA profile. $RASPA_DIR must be set in the environment.\n\n    Parameters\n    ----------\n    command\n        The command to run RASPA. This defaults to doing `${RASPA_DIR}/bin/simulate`\n        and typically does not need to be changed.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    if not command:\n        raspa_dir = os.environ.get(\"RASPA_DIR\")\n        if not raspa_dir:\n            raise OSError(\"RASPA_DIR environment variable not set\")\n        command = f\"{raspa_dir}/bin/simulate\"\n    super().__init__(command, **kwargs)\n</code></pre>"},{"location":"reference/raspa_ase/calculator.html#raspa_ase.calculator.RaspaProfile.get_calculator_command","title":"get_calculator_command","text":"<pre><code>get_calculator_command(inputfile=SIMULATION_INPUT)\n</code></pre> <p>Construct the command for the calculator.</p> <p>Parameters:</p> <ul> <li> <code>inputfile</code>               (<code>str</code>, default:                   <code>SIMULATION_INPUT</code> )           \u2013            <p>The name of the input file to use.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>The command to run the calculator.</p> </li> </ul> Source code in <code>raspa_ase/calculator.py</code> <pre><code>def get_calculator_command(self, inputfile: str = SIMULATION_INPUT) -&gt; list[str]:\n    \"\"\"\n    Construct the command for the calculator.\n\n    Parameters\n    ----------\n    inputfile\n        The name of the input file to use.\n\n    Returns\n    -------\n    list[str]\n        The command to run the calculator.\n    \"\"\"\n    return [self.command, f\"{inputfile}\"]\n</code></pre>"},{"location":"reference/raspa_ase/calculator.html#raspa_ase.calculator.RaspaProfile.version","title":"version","text":"<pre><code>version()\n</code></pre> <p>Get the RASPA version number.</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The RASPA version.</p> </li> </ul> Source code in <code>raspa_ase/calculator.py</code> <pre><code>def version(self) -&gt; str:\n    \"\"\"\n    Get the RASPA version number.\n\n    Returns\n    ------\n    str\n        The RASPA version.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/raspa_ase/calculator.html#raspa_ase.calculator.RaspaTemplate","title":"RaspaTemplate","text":"<pre><code>RaspaTemplate(frameworks=None)\n</code></pre> <p>               Bases: <code>CalculatorTemplate</code></p> <p>RASPA template, used to define how to read and write RASPA files.</p> <p>Parameters:</p> <ul> <li> <code>frameworks</code>               (<code>list[Atoms] | None</code>, default:                   <code>None</code> )           \u2013            <p>The frameworks to use, to be used in place of the <code>Atoms</code> object the calculator is applied to.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>raspa_ase/calculator.py</code> <pre><code>def __init__(self, frameworks: list[Atoms] | None = None) -&gt; None:\n    \"\"\"\n    Initialize the RASPA template.\n\n    Parameters\n    ----------\n    frameworks\n        The frameworks to use, to be used in place of the `Atoms` object\n        the calculator is applied to.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    super().__init__(\n        name=\"raspa\",\n        implemented_properties=[\"energy\"],\n    )\n\n    self.inputname = SIMULATION_INPUT\n    self.outputname = \"raspa.stdout\"\n    self.errorfile = \"raspa.stderr\"\n    self.frameworks = frameworks\n</code></pre>"},{"location":"reference/raspa_ase/calculator.html#raspa_ase.calculator.RaspaTemplate.load_profile","title":"load_profile","text":"<pre><code>load_profile(cfg, **kwargs)\n</code></pre> <p>Load the RASPA profile.</p> <p>Parameters:</p> <ul> <li> <code>cfg</code>           \u2013            <p>The ASE configuration profile, if any.</p> </li> <li> <code>**kwargs</code>           \u2013            <p>Any additional arguments to pass to the RASPA profile.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RaspaProfile</code>           \u2013            <p>The RASPA profile.</p> </li> </ul> Source code in <code>raspa_ase/calculator.py</code> <pre><code>def load_profile(self, cfg, **kwargs) -&gt; RaspaProfile:\n    \"\"\"\n    Load the RASPA profile.\n\n    Parameters\n    ----------\n    cfg\n        The ASE configuration profile, if any.\n    **kwargs\n        Any additional arguments to pass to the RASPA profile.\n\n    Returns\n    -------\n    RaspaProfile\n        The RASPA profile.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/raspa_ase/calculator.html#raspa_ase.calculator.RaspaTemplate.read_results","title":"read_results  <code>staticmethod</code>","text":"<pre><code>read_results(directory)\n</code></pre> <p>Read the results of a RASPA calculation.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path | str</code>)           \u2013            <p>The path to the directory to read the RASPA results from.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Results</code>           \u2013            <p>The RASPA results, formatted as a dictionary.</p> </li> </ul> Source code in <code>raspa_ase/calculator.py</code> <pre><code>@staticmethod\ndef read_results(directory: Path | str) -&gt; dict[str, Any]:\n    \"\"\"\n    Read the results of a RASPA calculation.\n\n    Parameters\n    ----------\n    directory\n        The path to the directory to read the RASPA results from.\n\n    Returns\n    -------\n    Results\n        The RASPA results, formatted as a dictionary.\n    \"\"\"\n    output_path = Path(directory) / \"Output\"\n    systems = Path(output_path).glob(\"System_*\")\n    results = {\"energy\": None}\n    for system in systems:\n        data_files = Path(system).glob(\"*.data\")\n        results[system.name] = {}\n        for data_file in data_files:\n            output = parse_output(data_file)\n            results[system.name][data_file.name] = output\n    return results\n</code></pre>"},{"location":"reference/raspa_ase/calculator.html#raspa_ase.calculator.RaspaTemplate.write_input","title":"write_input","text":"<pre><code>write_input(profile, directory, atoms, parameters, properties)\n</code></pre> <p>Write the RASPA input files.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path | str</code>)           \u2013            <p>The path to the directory to write the RASPA input files in.</p> </li> <li> <code>atoms</code>               (<code>Atoms</code>)           \u2013            <p>The ASE atoms object to use as the framework.</p> </li> <li> <code>parameters</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The RASPA parameters to use, formatted as a dictionary.</p> </li> <li> <code>profile</code>               (<code>RaspaProfile</code>)           \u2013            <p>This is needed the base class and should not be explicitly specified.</p> </li> <li> <code>properties</code>               (<code>Any</code>)           \u2013            <p>This is needed the base class and should not be explicitly specified.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>raspa_ase/calculator.py</code> <pre><code>def write_input(\n    self,\n    profile: RaspaProfile,  # skipcq: PYL-W0613\n    directory: Path | str,\n    atoms: Atoms,\n    parameters: dict[str, Any],\n    properties: Any,  # skipcq: PYL-W0613\n) -&gt; None:\n    \"\"\"\n    Write the RASPA input files.\n\n    Parameters\n    ----------\n    directory\n        The path to the directory to write the RASPA input files in.\n    atoms\n        The ASE atoms object to use as the framework.\n    parameters\n        The RASPA parameters to use, formatted as a dictionary.\n    profile\n         This is needed the base class and should not be explicitly specified.\n    properties\n        This is needed the base class and should not be explicitly specified.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    frameworks = self.frameworks if self.frameworks else [atoms]\n    parameters = merge_parameters(parameters, get_framework_params([atoms]))\n\n    write_simulation_input(parameters, directory / self.inputname)\n    write_frameworks(frameworks, directory)\n</code></pre>"},{"location":"reference/raspa_ase/utils/dicts.html","title":"dicts","text":""},{"location":"reference/raspa_ase/utils/dicts.html#raspa_ase.utils.dicts.convert_booleans","title":"convert_booleans","text":"<pre><code>convert_booleans(d)\n</code></pre> <p>Recursively convert boolean values to \"yes\" or \"no\".</p> <p>Parameters:</p> <ul> <li> <code>d</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The dictionary to convert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The dictionary with the boolean values converted to \"Yes\" or \"No\".</p> </li> </ul> Source code in <code>raspa_ase/utils/dicts.py</code> <pre><code>def convert_booleans(d: dict[str, Any]) -&gt; dict[str, Any]:\n    \"\"\"\n    Recursively convert boolean values to \"yes\" or \"no\".\n\n    Parameters\n    ----------\n    d\n        The dictionary to convert.\n\n    Returns\n    -------\n    dict\n        The dictionary with the boolean values converted to \"Yes\" or \"No\".\n    \"\"\"\n    for key, value in d.items():\n        if isinstance(value, bool):\n            d[key] = \"Yes\" if value else \"No\"\n        elif isinstance(value, dict):\n            convert_booleans(value)\n    return d\n</code></pre>"},{"location":"reference/raspa_ase/utils/dicts.html#raspa_ase.utils.dicts.get_parameter","title":"get_parameter","text":"<pre><code>get_parameter(d, key, default=None)\n</code></pre> <p>Get a parameter from a dictionary, ignoring case.</p> <p>Parameters:</p> <ul> <li> <code>d</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The dictionary to get the parameter from.</p> </li> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>The parameter to get.</p> </li> <li> <code>default</code>               (<code>Any</code>, default:                   <code>None</code> )           \u2013            <p>The default value to return if the parameter is not found.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>The value of the parameter, or the default value if the parameter is not found.</p> </li> </ul> Source code in <code>raspa_ase/utils/dicts.py</code> <pre><code>def get_parameter(d: dict[str, Any], key: str, default: Any = None) -&gt; Any:\n    \"\"\"\n    Get a parameter from a dictionary, ignoring case.\n\n    Parameters\n    ----------\n    d\n        The dictionary to get the parameter from.\n    key\n        The parameter to get.\n    default\n        The default value to return if the parameter is not found.\n\n    Returns\n    -------\n    Any\n        The value of the parameter, or the default value if the parameter is not found.\n    \"\"\"\n    d_lower = {k.lower(): v for k, v in d.items()}\n\n    return d_lower.get(key.lower(), default)\n</code></pre>"},{"location":"reference/raspa_ase/utils/dicts.html#raspa_ase.utils.dicts.merge_parameters","title":"merge_parameters","text":"<pre><code>merge_parameters(dict1, dict2)\n</code></pre> <p>Merge two dictionaries, ignoring case.</p> <p>Parameters:</p> <ul> <li> <code>dict1</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The first dictionary to merge.</p> </li> <li> <code>dict2</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The second dictionary to merge.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The merged dictionary.</p> </li> </ul> Source code in <code>raspa_ase/utils/dicts.py</code> <pre><code>def merge_parameters(dict1: dict[str, Any], dict2: dict[str, Any]) -&gt; dict[str, Any]:\n    \"\"\"\n    Merge two dictionaries, ignoring case.\n\n    Parameters\n    ----------\n    dict1\n        The first dictionary to merge.\n    dict2\n        The second dictionary to merge.\n\n    Returns\n    -------\n    dict\n        The merged dictionary.\n    \"\"\"\n    merged_dict = deepcopy(dict1)\n\n    for key2, value2 in dict2.items():\n        matching_key = next(\n            (key1 for key1 in merged_dict if key1.lower() == key2.lower()), None\n        )\n\n        if matching_key:\n            merged_dict[matching_key] = value2\n        else:\n            merged_dict[key2] = value2\n\n    return merged_dict\n</code></pre>"},{"location":"reference/raspa_ase/utils/dicts.html#raspa_ase.utils.dicts.pop_parameter","title":"pop_parameter","text":"<pre><code>pop_parameter(d, key)\n</code></pre> <p>Pop a parameter from a dictionary, ignoring case.</p> <p>Parameters:</p> <ul> <li> <code>d</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The dictionary to pop the parameter from.</p> </li> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>The parameter to pop.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code>           \u2013            <p>The value of the parameter or None if the parameter is not found.</p> </li> </ul> Source code in <code>raspa_ase/utils/dicts.py</code> <pre><code>def pop_parameter(d: dict[str, Any], key: str) -&gt; Any:\n    \"\"\"\n    Pop a parameter from a dictionary, ignoring case.\n\n    Parameters\n    ----------\n    d\n        The dictionary to pop the parameter from.\n    key\n        The parameter to pop.\n\n    Returns\n    -------\n    Any\n        The value of the parameter or None if the parameter is not found.\n    \"\"\"\n    for k, v in d.items():\n        if k.lower() == key.lower():\n            del d[k]\n            return v\n    return None\n</code></pre>"},{"location":"reference/raspa_ase/utils/io.html","title":"io","text":""},{"location":"reference/raspa_ase/utils/io.html#raspa_ase.utils.io.parse_output","title":"parse_output","text":"<pre><code>parse_output(filepath)\n</code></pre> <p>Specific parsing of the output file. Adapted from the following: https://github.com/iRASPA/RASPA2/blob/master/python/output_parser.py</p> <p>Parameters:</p> <ul> <li> <code>filepath</code>               (<code>str | Path</code>)           \u2013            <p>The path to the RASPA output file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The parsed output data.</p> </li> </ul> Source code in <code>raspa_ase/utils/io.py</code> <pre><code>def parse_output(filepath: str | Path) -&gt; dict[str, Any]:\n    \"\"\"\n    Specific parsing of the output file. Adapted from the following:\n    https://github.com/iRASPA/RASPA2/blob/master/python/output_parser.py\n\n    Parameters\n    ----------\n    filepath\n        The path to the RASPA output file.\n\n    Returns\n    -------\n    dict\n        The parsed output data.\n    \"\"\"\n\n    def _clean(split_list: list[str]) -&gt; list[float]:\n        \"\"\"Strips and attempts to convert a list of strings to floats.\"\"\"\n\n        def try_float(s):\n            try:\n                return float(s)\n            except ValueError:\n                return s\n\n        return [try_float(s.strip()) for s in split_list if s]\n\n    with Path(filepath).open(mode=\"r\") as fd:\n        raspa_output = fd.read()\n\n    # Reads the string into a newline-separated list, skipping useless lines\n    data = [\n        row.strip()\n        for row in raspa_output.splitlines()\n        if row and all(d not in row for d in [\"-----\", \"+++++\"])\n    ]\n\n    # Generally, categories in the output are delimited by equal signs\n    delimiters = [\n        i\n        for i, row in enumerate(data)\n        if \"=====\" in row and \"Exclusion constraints energy\" not in data[i - 1]\n    ]\n\n    # Append a row for \"absolute adsorption:\" and \"excess adsorption:\"\n    # These values are separated into two rows\n    abs_adsorp_rows = [i for i, row in enumerate(data) if \"absolute adsorption:\" in row]\n    for row in abs_adsorp_rows:\n        data[row] += \"  \" + data[row + 1]\n        data[row + 2] += data[row + 3]\n        data[row + 1], data[row + 3] = \" \", \" \"\n\n    # Use the delimiters to make a high-level dict. Title is row before\n    # delimiter, and content is every row after delimiter, up to the next title\n    info = {\n        data[n - 1].strip(\":\"): data[n + 1 : delimiters[i + 1] - 1]\n        for i, n in enumerate(delimiters[:-1])\n    }\n\n    # Let's PARSE!\n    for key, values in info.items():\n        d, note_index = {}, 1\n        for item in values:\n            # Takes care of all \"Blocks[ #]\", skipping hard-to-parse parts\n            if (\n                \"Block\" in item\n                and \"Box-lengths\" not in key\n                and \"Van der Waals:\" not in item\n            ):\n                blocks = _clean(item.split())\n                d[\"\".join(blocks[:2])] = blocks[2:]\n\n            # Most of the average data values are parsed in this section\n            elif (\n                any(s in item for s in [\"Average     \", \"Surface area:\"])\n                and \"desorption\" not in key\n            ):\n                average_data = _clean(item.split())\n                # Average values organized by its unit, many patterns here\n                if len(average_data) == 8:\n                    del average_data[2:4]\n                    d[\" \".join(average_data[4:6])] = average_data[1:4]\n                elif len(average_data) == 5:\n                    d[average_data[-1]] = average_data[1:4]\n                elif \"Surface\" in average_data[0]:\n                    d[average_data[-1]] = average_data[2:5]\n                # This is the common case\n                else:\n                    del average_data[2]\n                    d[average_data[-1]] = average_data[1:4]\n\n            # Average box-lengths has its own pattern\n            elif \"Box-lengths\" in key:\n                box_lengths = _clean(item.split())\n                i = 3 if \"angle\" in item else 2\n                d[\" \".join(box_lengths[:i])] = box_lengths[i:]\n\n            # \"Heat of Desorption\" section\n            elif \"desorption\" in key:\n                if \"Note\" in item:\n                    notes = re.split(r\"[:\\s]{2,}\", item)\n                    d[\"%s %d\" % (notes[0], note_index)] = notes[1]\n                    note_index += 1\n                else:\n                    heat_desorp = _clean(item.split())\n                    # One line has \"Average\" in front, force it to be normal\n                    if \"Average\" in item:\n                        del heat_desorp[0]\n                    d[heat_desorp[-1]] = heat_desorp[0:3]\n\n            # Parts where Van der Waals are included\n            elif (\n                \"Host-\" in key or \"-Cation\" in key or \"Adsorbate-Adsorbate\" in key\n            ) and \"desorption\" not in key:\n                van_der = item.split()\n                # First Column\n                if \"Block\" in van_der[0]:\n                    sub_data = [\n                        _clean(s.split(\":\")) for s in re.split(r\"\\s{2,}\", item)[1:]\n                    ]\n                    sub_dict = {s[0]: s[1] for s in sub_data[:2]}\n                    d[\"\".join(van_der[:2])] = [float(van_der[2]), sub_dict]\n                # Average for each columns\n                elif \"Average\" in item:\n                    avg = _clean(re.split(r\"\\s{2,}\", item))\n                    vdw, coulomb = (_clean(s.split(\": \")) for s in avg[2:4])\n                    d[avg[0]] = avg[1]\n                    d[\"Average %s\" % vdw[0]] = vdw[1]\n                    d[\"Average %s\" % coulomb[0]] = coulomb[1]\n                else:\n                    d[\"standard deviation\"] = _clean(van_der)\n\n            # IMPORTANT STUFF\n            elif \"Number of molecules\" in key:\n                adsorb_data = _clean(item.rsplit(\" \", 12))\n                if \"Component\" in item:\n                    gas_name = adsorb_data[2].strip(\"[]\")\n                    d[gas_name] = {}\n                else:\n                    d[gas_name][adsorb_data[0]] = adsorb_data[1:]\n\n            # Henry and Widom\n            elif \"Average Widom\" in item:\n                d[\"Widom\"] = _clean(item.rsplit(\" \", 5))[1:]\n\n            elif \"Average Henry\" in item:\n                d[\"Henry\"] = _clean(item.rsplit(\" \", 5))[1:]\n\n            # Ignore these\n            elif any(\n                s in item\n                for s in [\"=====\", \"Starting simulation\", \"Finishing simulation\"]\n            ):\n                continue\n\n            # Other strings\n            else:\n                parsed_data = _clean(re.split(r\"[()[\\]:,\\t]\", item))\n                d[parsed_data[0]] = parsed_data[1:]\n        # Putting subdictionary back into main object\n        info[key] = d\n\n    return info\n</code></pre>"},{"location":"reference/raspa_ase/utils/io.html#raspa_ase.utils.io.write_frameworks","title":"write_frameworks","text":"<pre><code>write_frameworks(frameworks, directory)\n</code></pre> <p>Write the CIF files for a list of frameworks.</p> <p>Parameters:</p> <ul> <li> <code>frameworks</code>               (<code>list[Atoms]</code>)           \u2013            <p>The frameworks to write.</p> </li> <li> <code>directory</code>               (<code>str | Path</code>)           \u2013            <p>The directory to write the CIF files to.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>None</code>           \u2013            </li> </ul> Source code in <code>raspa_ase/utils/io.py</code> <pre><code>def write_frameworks(frameworks: list[Atoms], directory: str | Path) -&gt; None:\n    \"\"\"\n    Write the CIF files for a list of frameworks.\n\n    Parameters\n    ----------\n    frameworks\n        The frameworks to write.\n    directory\n        The directory to write the CIF files to.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    for i, framework in enumerate(frameworks):\n        if framework == Atoms():\n            continue\n        name = f\"framework{i}\"\n\n        structure = AseAtomsAdaptor.get_structure(framework)\n        structure.to(str(Path(directory, name + \".cif\")), write_site_properties=True)\n</code></pre>"},{"location":"reference/raspa_ase/utils/io.html#raspa_ase.utils.io.write_simulation_input","title":"write_simulation_input","text":"<pre><code>write_simulation_input(parameters, input_filepath)\n</code></pre> <p>Write the <code>simulation.input</code> file for a given set of parameters.</p> <p>Parameters:</p> <ul> <li> <code>parameters</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The parameters to write to the simulation input file.</p> </li> <li> <code>input_filepath</code>               (<code>str | Path</code>)           \u2013            <p>The path to the simulation input file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>The simulation input string.</p> </li> </ul> Source code in <code>raspa_ase/utils/io.py</code> <pre><code>def write_simulation_input(\n    parameters: dict[str, Any], input_filepath: str | Path\n) -&gt; str:\n    \"\"\"\n    Write the `simulation.input` file for a given set of parameters.\n\n    Parameters\n    ----------\n    parameters\n        The parameters to write to the simulation input file.\n    input_filepath\n        The path to the simulation input file.\n\n    Returns\n    -------\n    str\n        The simulation input string.\n    \"\"\"\n\n    simulation_input = \"\"\n    parameters = convert_booleans(parameters)\n\n    for k, v in parameters.items():\n        if isinstance(v, dict):\n            simulation_input += f\"{k}\\n\"\n            simulation_input += _dict_to_str(v)\n        elif isinstance(v, list):\n            simulation_input += f\"{k} \"\n            simulation_input += _iterable_to_str(v)\n        else:\n            simulation_input += f\"{k} {v}\\n\"\n\n    with Path(input_filepath).open(mode=\"w\") as fd:\n        fd.write(simulation_input)\n</code></pre>"},{"location":"reference/raspa_ase/utils/params.html","title":"params","text":""},{"location":"reference/raspa_ase/utils/params.html#raspa_ase.utils.params.get_framework_params","title":"get_framework_params","text":"<pre><code>get_framework_params(frameworks)\n</code></pre> <p>Get the framework-related parameters.</p> <p>Parameters:</p> <ul> <li> <code>frameworks</code>               (<code>list[Atoms]</code>)           \u2013            <p>The frameworks to get the parameters for.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>The framework-related parameters.</p> </li> </ul> Source code in <code>raspa_ase/utils/params.py</code> <pre><code>def get_framework_params(frameworks: list[Atoms]) -&gt; dict[str, Any]:\n    \"\"\"\n    Get the framework-related parameters.\n\n    Parameters\n    ----------\n    frameworks\n        The frameworks to get the parameters for.\n\n    Returns\n    -------\n    dict\n        The framework-related parameters.\n    \"\"\"\n\n    parameters = {}\n    for i, framework in enumerate(frameworks):\n        if framework == Atoms():\n            continue\n\n        name = f\"framework{i}\"\n        cutoff = get_parameter(parameters, \"CutOff\", default=12.0)\n        n_cells = get_suggested_cells(framework, cutoff)\n\n        framework_params = {\n            \"FrameworkName\": name,\n            \"UnitCells\": n_cells,\n        }\n\n        if framework.has(\"initial_charges\"):\n            framework_params = merge_parameters(\n                framework_params, {\"UseChargesFromCIFFile\": True}\n            )\n\n        parameters[f\"Framework {i}\"] = merge_parameters(\n            framework_params,\n            framework.info,\n        )\n\n    return parameters\n</code></pre>"},{"location":"reference/raspa_ase/utils/params.html#raspa_ase.utils.params.get_suggested_cells","title":"get_suggested_cells","text":"<pre><code>get_suggested_cells(framework, cutoff)\n</code></pre> <p>Get the suggested number of unit cells in each dimension for a given cutoff.</p> <p>Parameters:</p> <ul> <li> <code>framework</code>               (<code>Atoms</code>)           \u2013            <p>The framework to calculate the suggested number of unit cells for.</p> </li> <li> <code>cutoff</code>               (<code>float</code>)           \u2013            <p>The cutoff used for the calculation, in A.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[int, int, int]</code>           \u2013            <p>The suggested number of unit cells in each dimension.</p> </li> </ul> Source code in <code>raspa_ase/utils/params.py</code> <pre><code>def get_suggested_cells(framework: Atoms, cutoff: float) -&gt; list[int]:\n    \"\"\"\n    Get the suggested number of unit cells in each dimension for a given cutoff.\n\n    Parameters\n    ----------\n    framework\n        The framework to calculate the suggested number of unit cells for.\n    cutoff\n        The cutoff used for the calculation, in A.\n\n    Returns\n    -------\n    tuple[int, int, int]\n        The suggested number of unit cells in each dimension.\n    \"\"\"\n    A, B, C = framework.get_cell()[:3]\n\n    def _calculate_min_dist(v1, v2, v3):\n        cross_product = np.cross(v1, v2)\n        numerator = np.linalg.norm(np.dot(cross_product, v3))\n        denominator = np.linalg.norm(cross_product)\n        return np.divide(numerator, denominator)\n\n    min_A = _calculate_min_dist(B, C, A)\n    min_B = _calculate_min_dist(C, A, B)\n    min_C = _calculate_min_dist(A, B, C)\n    return [int(np.ceil(cutoff / (0.5 * min_i))) for min_i in [min_A, min_B, min_C]]\n</code></pre>"}]}